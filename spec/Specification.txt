File Structure

/
	ScriptActions.exe
	log.txt
/config
	main.ini	MainConfiguration File
	actions.ini	Defines actions (by name) and assigns them a key or screen coordinates
	hotkeys.ini	Assigns hotkeys (FN-Keys) to scripts
/scripts
;contains "script" files, each containing a list of actions to execute/click
	sample_script.txt
/extras
	MouseCoordRec.exe
		F1 to cancel/exit
		SPACE to record current mouse coordinates
	coord.txt

ScriptActions

----STEP 1: CHECK FOR DUPLICATE PROCESS------------------------------------------------------

	check does similiar process already exists?
		EXIT_WITH_ERRORMSG: "another instance of ScriptActions already running"

----STEP 2: PREPARE LOGFILE ------------------------------------------------------------------

	define TIME = system::getTime()
	define DATE = system::getDate()

	define LOGFILE = DATE + "-" + TIME + "-log.txt"

	create or overwrite file LOGFILE in current directory

	function log(msg) 
		msg = getTime() + msg
		system::appendToFile(LOGFILE, msg)
	end function

----STEP 3: DEFINE EXIT with logging ---------------------------------------------------------	

	function exitWithMsg(msg) 
		log(msg)
		MSGBOX msg
		EXIT_SCRIPT_OR_APPLICATION
	end function

----STEP 3: LOAD & VALIDATE CONFIGURATION, SETUP HOTKEYS -------------------------------------

	log("loading configuration")

	check that folder "scripts" exists
		ELSE: 
			TRY: create folder "script"
			  ON_FAIL: exitWithMsg("Folder 'scripts' can not be created. make sure application path is readable")
			log("created scripts dir")

	check that there is atleast one file
		ELSE: 
			TRY: create file "config/sample_script.txt" with content ";dummy script \n\n ExitScriptActions"
			  ON_FAIL: exitWithMsg("Folder 'scripts' is not writable.")
			log("created sample script ")

	check that folder "config" exists
		ELSE: 
			TRY: create config folder
			  ON_FAIL: exitWithMsg("Folder 'config' can not be created. make sure application path is readable")
			log("created config dir")

	read file "main.ini"
		ELSE: exitWithMsg("config/main.ini missing or not readable")
	check that all necessary elements are there
		ELSE: exitWithMsg("config/main.ini is damaged")
	init variables with values from (main)ini section [General]
	init variables with values from (main)ini section [Debug]
	init variables with values from (main)ini section [Mouse]
	init variables with values from (main)ini section [TargetWindow]
	
	IF: [TargetWindow]TargetWindowAssign == True
		define TITLE_FILENAME = [TargetWindow]TargetWindowTitleFile
		check that file with TITLE_FILENAME exists in dir "config"
		ELSE: exitWithMsg("could not read config/TITLE_FILENAME")
		define (global) TARGET_WINDOW_NAME = contents of file TITLE_FILENAME 

	  	IF: [TargetWindow]ExitOnTargetWindowMissing == True
		check that window with title TARGET_WINDOW_NAME exists
		ELSE: exitWithMsg("could not find target window: TARGET_WINDOW_NAME")
		
	read file "actions.ini"
	ELSE: exitWithMsg("config/actions.ini missing or not readable")
		check that there is at lease one action
		ELSE: exitWithMsg("No actions defined in config/actions.ini")
		init keyvaluestore ACTIONS with values from (actions)ini section
			schema: key=actionName
				value=pixelCoordOrKeyId 
	
		add actionName=ExitScriptActions value="EXIT"
	
	log("actions loaded")

	read file "hotkeys.ini"
	ELSE: EXIT_WITH_ERROR "config/hotkeys.ini missing or not readable"
		check that there is at lease one hotkey set
		ELSE: EXIT_WITH_ERRORMSG: "No hotkeys defined in config/hotkeys.ini"
		init keyvaluestore SCRIPTS with values from (scripts)ini section
			schema: key=hotkeyName
				value=scriptName

		FOREACH: hotkeyName in SCRIPTS
			IF: SCRIPTS[hotkeyName] has scriptName (!= "")
				check file "config/VALUEOF(scriptName).txt" exists
				ELSE exitWithMsg("script config/VALUEOF(scriptName) does not exist or isnt readable, but is assigned to hotkey in config/hotkeys.ini")

			bind hotkeyName -> runScript(VALUEOF(scriptName))
			log("binding VALUEOF(hotkeyName) to script VALUEOF(scriptName)")
	
----STEP 2: MAIN EVENT LOOP -----------------------------

	stay open

 	IF [TargetWindow]TargetWindowAssign == True
		run every 1000 miliseconds (aka every second)
			check window with title TARGET_WINDOW_NAME exists
			ELSE: exitWithMsg("TargetWindow VALUEOF(TARGET_WINDOW_NAME) went away. exiting")

	function runScript(scriptName)
		check file "config/VALUEOF(scriptName).txt" exists
		ELSE: exitWithMsg("script config/VALUEOF(scriptName) does not exist or isnt readable, but is assigned to hotkey in config/hotkeys.ini")
		
		array INSTRUCTIONS;

		read file "config/VALUEOF(scriptName).txt"

		//FirstLoop: Validation of Script actions
		FOREACH: LINE in file
			IF: LINE does not beginn with ";" (which means that it is action, rather than a comment)
				IF: LINE does not exist in ACTIONS[]
					MSGBOX "Unknown action in script VALUEOF(scriptName) at line LINENR: VALUEOF(LINE). Will not run script"
					RETURN
				add LINE to INSTRUCTIONS

		//SecondLoop: Execution of Script actions
		FOREACH: in ACTION in INSTRUCTIONS
			IF: ACTIONS[ACTION] is "EXIT"
				EXIT();
			ELSE_IF: ACTIONS[ACTION] is key
				system::pressKey(key)
			ELSE:
				define COORDS = ACTIONS[ACTION];
				define ARR_COORDS = split(coords,',')
				system::setMouseCoords(ARR_COORDS[0], ARR_COORDS[1])
				system::performLeftMouseClick()	
	 end function